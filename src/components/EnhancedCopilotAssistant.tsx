import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useAuth } from './AuthContext';

interface ChatMessage {
  id: string;
  type: 'user' | 'bot' | 'system';
  text: string;
  timestamp: string;
  isTyping?: boolean;
  suggestions?: string[];
  data?: any;
}

interface KnowledgeBase {
  [key: string]: {
    keywords: string[];
    response: string;
    followUp?: string[];
    data?: any;
  };
}

const EnhancedCopilotAssistant: React.FC = () => {
  const { user } = useAuth();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isConnected, setIsConnected] = useState(true);
  const [conversationContext, setConversationContext] = useState<string[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Simulated knowledge base for civic topics
  const knowledgeBase: KnowledgeBase = {
    elections: {
      keywords: ['elecciones', 'votar', 'candidatos', 'electoral', 'voto'],
      response: 'Las pr√≥ximas elecciones regionales ser√°n el 27 de octubre de 2024. Podr√°s votar por alcaldes, gobernadores y asambleas departamentales.',
      followUp: [
        '¬øD√≥nde est√° mi puesto de votaci√≥n?',
        '¬øQu√© documentos necesito para votar?',
        '¬øQui√©nes son los candidatos en mi ciudad?'
      ],
      data: {
        nextElectionDate: '2024-10-27',
        documentsRequired: ['C√©dula de ciudadan√≠a', 'Contrase√±a electoral (opcional)'],
        positions: ['Alcalde', 'Gobernador', 'Asamblea Departamental']
      }
    },
    participation: {
      keywords: ['participar', 'participaci√≥n', 'ciudadana', 'c√≠vica', 'debate'],
      response: 'Hay muchas formas de participar: debates en vivo, encuestas c√≠vicas, consultas populares, y foros comunitarios. Tambi√©n puedes unirte a nuestros chats tem√°ticos.',
      followUp: [
        '¬øC√≥mo me uno a un debate?',
        '¬øQu√© son las consultas populares?',
        '¬øC√≥mo crear una propuesta ciudadana?'
      ]
    },
    congress: {
      keywords: ['congreso', 'senado', 'c√°mara', 'representantes', 'ley', 'proyecto'],
      response: 'El Congreso de Colombia est√° compuesto por el Senado (102 miembros) y la C√°mara de Representantes (172 miembros). Puedes seguir los proyectos de ley en tiempo real.',
      followUp: [
        '¬øQu√© proyectos est√°n en debate ahora?',
        '¬øC√≥mo contactar a mi representante?',
        '¬øC√≥mo se aprueba una ley?'
      ],
      data: {
        currentProjects: [
          'Reforma Tributaria 2024',
          'Ley de Educaci√≥n Digital',
          'Proyecto de Energ√≠as Renovables'
        ]
      }
    },
    budget: {
      keywords: ['presupuesto', 'gastos', 'inversi√≥n', 'finanzas', 'p√∫blico'],
      response: 'El presupuesto nacional 2024 es de aproximadamente 406 billones de pesos. Los principales destinos son educaci√≥n (18%), salud (16%), y defensa (12%).',
      followUp: [
        '¬øEn qu√© se gasta m√°s dinero?',
        '¬øC√≥mo se decide el presupuesto?',
        '¬øPuedo influir en las decisiones presupuestales?'
      ],
      data: {
        totalBudget: 406000000000000,
        mainAllocations: {
          education: 18,
          health: 16,
          defense: 12,
          infrastructure: 10,
          socialPrograms: 8
        }
      }
    },
    transparency: {
      keywords: ['transparencia', 'corrupci√≥n', 'contratos', 'informaci√≥n', 'p√∫blica'],
      response: 'Colombia tiene varias herramientas de transparencia: SECOP para contratos p√∫blicos, la Procuradur√≠a para investigaciones, y el portal de datos abiertos del gobierno.',
      followUp: [
        '¬øC√≥mo consultar contratos p√∫blicos?',
        '¬øC√≥mo denunciar corrupci√≥n?',
        '¬øQu√© informaci√≥n puedo solicitar?'
      ]
    }
  };

  const quickQuestions = [
    '¬øCu√°ndo son las pr√≥ximas elecciones?',
    '¬øC√≥mo puedo participar en un debate?',
    '¬øQu√© proyectos est√°n en el Congreso?',
    '¬øC√≥mo funciona el presupuesto nacional?',
    '¬øD√≥nde encuentro informaci√≥n sobre candidatos?',
    '¬øC√≥mo denuncio corrupci√≥n?',
    '¬øQu√© son las consultas populares?',
    '¬øC√≥mo contactar a mi representante?'
  ];

  // Initialize with welcome message
  useEffect(() => {
    const welcomeMessage: ChatMessage = {
      id: '1',
      type: 'bot',
      text: `¬°Hola${user ? `, ${user.displayName || user.email?.split('@')[0]}` : ''}! Soy tu asistente c√≠vico. Estoy aqu√≠ para ayudarte con informaci√≥n sobre participaci√≥n ciudadana, elecciones, el Congreso, y todo lo relacionado con la vida c√≠vica en Colombia. ¬øEn qu√© puedo ayudarte hoy?`,
      timestamp: new Date().toISOString(),
      suggestions: [
        '¬øCu√°ndo son las elecciones?',
        '¬øC√≥mo participar en debates?',
        '¬øQu√© pasa en el Congreso?'
      ]
    };
    setMessages([welcomeMessage]);
  }, [user]);

  // Auto-scroll to latest message
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Smart response generation based on keywords and context
  const generateResponse = useCallback((userInput: string, context: string[]): ChatMessage => {
    const input = userInput.toLowerCase();
    let bestMatch = null;
    let maxMatches = 0;

    // Find the knowledge base entry with the most keyword matches
    for (const [topic, data] of Object.entries(knowledgeBase)) {
      const matches = data.keywords.filter(keyword => input.includes(keyword)).length;
      if (matches > maxMatches) {
        maxMatches = matches;
        bestMatch = { topic, ...data };
      }
    }

    if (bestMatch && maxMatches > 0) {
      return {
        id: Date.now().toString(),
        type: 'bot',
        text: bestMatch.response,
        timestamp: new Date().toISOString(),
        suggestions: bestMatch.followUp,
        data: bestMatch.data
      };
    }

    // Context-aware responses
    if (context.some(c => c.includes('elecciones')) && input.includes('documentos')) {
      return {
        id: Date.now().toString(),
        type: 'bot',
        text: 'Para votar necesitas tu c√©dula de ciudadan√≠a vigente. La contrase√±a electoral es opcional pero recomendada para agilizar el proceso.',
        timestamp: new Date().toISOString(),
        suggestions: [
          '¬øD√≥nde est√° mi puesto de votaci√≥n?',
          '¬øQu√© pasa si perd√≠ mi c√©dula?',
          '¬øPuedo votar desde el extranjero?'
        ]
      };
    }

    if (context.some(c => c.includes('debate')) && input.includes('participar')) {
      return {
        id: Date.now().toString(),
        type: 'bot',
        text: 'Para participar en debates, ve a la secci√≥n "Debates C√≠vicos", selecciona un tema activo y toma posici√≥n (a favor o en contra). Recuerda mantener un tono respetuoso y fundamentar tus argumentos.',
        timestamp: new Date().toISOString(),
        suggestions: [
          'Ver debates activos',
          '¬øQu√© temas se debaten m√°s?',
          '¬øC√≥mo crear un nuevo debate?'
        ]
      };
    }

    // Generic helpful response with suggestions
    return {
      id: Date.now().toString(),
      type: 'bot',
      text: 'Gracias por tu pregunta. Aunque no tengo una respuesta espec√≠fica para eso, puedo ayudarte con informaci√≥n sobre elecciones, participaci√≥n ciudadana, el Congreso, presupuesto nacional y transparencia gubernamental. ¬øTe interesa alguno de estos temas?',
      timestamp: new Date().toISOString(),
      suggestions: [
        '¬øCu√°ndo son las elecciones?',
        '¬øC√≥mo participar activamente?',
        '¬øQu√© hace el Congreso?',
        '¬øC√≥mo se usa el presupuesto?'
      ]
    };
  }, []);

  const sendMessage = async (messageText: string = input) => {
    if (!messageText.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      text: messageText,
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsTyping(true);

    // Update conversation context
    setConversationContext(prev => [...prev.slice(-4), messageText.toLowerCase()]);

    // Simulate processing delay
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    const botResponse = generateResponse(messageText, conversationContext);
    
    setIsTyping(false);
    setMessages(prev => [...prev, botResponse]);

    // Focus back to input
    inputRef.current?.focus();
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInput(suggestion);
    sendMessage(suggestion);
  };

  const formatTime = (timestamp: string) => {
    return new Date(timestamp).toLocaleTimeString('es-CO', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="bg-gradient-to-r from-yellow-400 via-blue-500 to-red-500 p-6 rounded-lg mb-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-white mb-2">ü§ñ Asistente C√≠vico</h1>
              <p className="text-white/90">Tu gu√≠a inteligente para la participaci√≥n ciudadana en Colombia</p>
            </div>
            <div className="flex items-center space-x-2 text-white">
              <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-400 animate-pulse' : 'bg-red-400'}`}></div>
              <span className="text-sm">{isConnected ? 'Conectado' : 'Desconectado'}</span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          {/* Chat Messages */}
          <div 
            className="h-96 overflow-y-auto p-6 space-y-4"
            role="log"
            aria-live="polite"
            aria-label="Conversaci√≥n con el asistente c√≠vico"
          >
            {messages.map((message) => (
              <div 
                key={message.id} 
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`max-w-xs lg:max-w-md ${
                  message.type === 'user' ? 'order-2' : 'order-1'
                }`}>
                  {/* Avatar */}
                  <div className={`flex items-center space-x-2 mb-1 ${
                    message.type === 'user' ? 'justify-end' : 'justify-start'
                  }`}>
                    {message.type === 'bot' && (
                      <span className="text-lg" role="img" aria-label="Asistente c√≠vico">ü§ñ</span>
                    )}
                    <span className="text-sm text-gray-500">
                      {message.type === 'user' ? 'T√∫' : 'Asistente C√≠vico'}
                    </span>
                    <time className="text-xs text-gray-400" dateTime={message.timestamp}>
                      {formatTime(message.timestamp)}
                    </time>
                    {message.type === 'user' && (
                      <span className="text-lg" role="img" aria-label="Usuario">üôã‚Äç‚ôÇÔ∏è</span>
                    )}
                  </div>

                  {/* Message Bubble */}
                  <div className={`px-4 py-2 rounded-lg ${
                    message.type === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gray-100 text-gray-900'
                  }`}>
                    {message.text}
                  </div>

                  {/* Suggestions */}
                  {message.suggestions && message.suggestions.length > 0 && (
                    <div className="mt-2 space-y-1">
                      <p className="text-xs text-gray-500 mb-1">Preguntas relacionadas:</p>
                      {message.suggestions.map((suggestion, index) => (
                        <button
                          key={index}
                          onClick={() => handleSuggestionClick(suggestion)}
                          className="block text-left text-xs bg-blue-50 text-blue-700 px-3 py-1 rounded-full hover:bg-blue-100 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          {suggestion}
                        </button>
                      ))}
                    </div>
                  )}

                  {/* Data Visualization */}
                  {message.data && message.data.mainAllocations && (
                    <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                      <h4 className="text-sm font-semibold text-gray-900 mb-2">Distribuci√≥n del Presupuesto:</h4>
                      <div className="space-y-1">
                        {Object.entries(message.data.mainAllocations as Record<string, number>).map(([category, percentage]) => (
                          <div key={category} className="flex items-center space-x-2">
                            <div className="w-16 bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-blue-500 h-2 rounded-full"
                                style={{ width: `${percentage}%` }}
                              ></div>
                            </div>
                            <span className="text-xs text-gray-600 capitalize">
                              {category}: {String(percentage)}%
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {message.data && message.data.currentProjects && (
                    <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                      <h4 className="text-sm font-semibold text-gray-900 mb-2">Proyectos Actuales:</h4>
                      <ul className="text-sm text-gray-700 space-y-1">
                        {message.data.currentProjects.map((project: string, index: number) => (
                          <li key={index} className="flex items-center space-x-2">
                            <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                            <span>{project}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            ))}

            {/* Typing Indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="flex items-center space-x-2">
                  <span className="text-lg" role="img" aria-label="Asistente c√≠vico">ü§ñ</span>
                  <div className="bg-gray-100 px-4 py-2 rounded-lg">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Questions */}
          <div className="px-6 py-4 border-t border-b bg-gray-50">
            <h3 className="text-sm font-semibold text-gray-700 mb-2">Preguntas frecuentes:</h3>
            <div className="flex flex-wrap gap-2">
              {quickQuestions.slice(0, 6).map((question, index) => (
                <button
                  key={index}
                  onClick={() => handleSuggestionClick(question)}
                  className="text-xs bg-white text-gray-700 px-3 py-1 rounded-full border hover:bg-blue-50 hover:text-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {question}
                </button>
              ))}
            </div>
          </div>

          {/* Input */}
          <div className="p-6">
            <div className="flex space-x-3">
              <input
                ref={inputRef}
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Preg√∫ntame sobre participaci√≥n c√≠vica, elecciones, debates..."
                className="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={!isConnected}
                maxLength={500}
                aria-label="Escribir pregunta al asistente"
              />
              <button
                onClick={() => sendMessage()}
                disabled={!input.trim() || !isConnected || isTyping}
                className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-blue-500"
                aria-label="Enviar pregunta"
              >
                {isTyping ? (
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                ) : (
                  'Enviar'
                )}
              </button>
            </div>
            <p className="text-xs text-gray-500 mt-2">
              El asistente est√° dise√±ado para ayudarte con temas c√≠vicos y de participaci√≥n ciudadana en Colombia.
            </p>
          </div>
        </div>

        {/* Features Cards */}
        <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-white p-4 rounded-lg shadow border-l-4 border-blue-500">
            <h3 className="font-semibold text-gray-900 mb-2 flex items-center">
              <span className="mr-2">üéØ</span>
              Orientaci√≥n Personalizada
            </h3>
            <p className="text-sm text-gray-600">
              Recomendaciones basadas en tus intereses c√≠vicos y tu ubicaci√≥n en Colombia.
            </p>
          </div>
          
          <div className="bg-white p-4 rounded-lg shadow border-l-4 border-green-500">
            <h3 className="font-semibold text-gray-900 mb-2 flex items-center">
              <span className="mr-2">üìö</span>
              Educaci√≥n C√≠vica
            </h3>
            <p className="text-sm text-gray-600">
              Aprende sobre el sistema pol√≠tico, electoral y de participaci√≥n ciudadana en Colombia.
            </p>
          </div>
          
          <div className="bg-white p-4 rounded-lg shadow border-l-4 border-yellow-500">
            <h3 className="font-semibold text-gray-900 mb-2 flex items-center">
              <span className="mr-2">‚ö°</span>
              Respuestas Instant√°neas
            </h3>
            <p className="text-sm text-gray-600">
              Informaci√≥n actualizada las 24 horas con datos oficiales y verificados.
            </p>
          </div>
        </div>

        {/* Connection Status */}
        {!isConnected && (
          <div 
            className="fixed bottom-4 right-4 bg-red-600 text-white px-4 py-2 rounded-lg shadow-lg"
            role="alert"
            aria-live="assertive"
          >
            <div className="flex items-center space-x-2">
              <span>üî¥</span>
              <span>Asistente desconectado. Reintentando...</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default EnhancedCopilotAssistant;